"""
Prompt template management module.

This module handles the creation and formatting of prompt templates
for LLM interactions, including system prompts, user prompts, and
reference file formatting.
"""

import logging
from typing import Optional
from dataclasses import dataclass


@dataclass
class PromptContext:
    """Context data for prompt generation."""
    theme: str
    app_name: str
    variant_folder: str
    ui_color: str
    reference_file: str


class PromptTemplateBuilder:
    """
    Builds and manages prompt templates for LLM interactions.
    
    This class handles the creation of system and user prompts,
    reference file formatting, and template customization.
    """
    
    def __init__(self):
        """Initialize prompt template builder."""
        self.logger = logging.getLogger(__name__)
        
        # System prompt template
        self._system_prompt_template = self._get_system_prompt_template()
        
        # User prompt template
        self._user_prompt_template = self._get_user_prompt_template()
        
        self.logger.info("PromptTemplateBuilder initialized")
    
    def _get_system_prompt_template(self) -> str:
        """Get the system prompt template."""
        return """‰Ω†ÊòØ‰∏Ä‰ΩçÊûÅÂÖ∑ÂàõÊÑèÁöÑ Android ÂºÄÂèëÂ∑•Á®ãÂ∏àÂíåÊèêÁ§∫ËØç‰∏ìÂÆ∂ÔºåÊìÖÈïøËÆæËÆ°ÂàõÊñ∞ÊÄß„ÄÅË∂£Âë≥ÊÄßÁöÑÁßªÂä®Â∫îÁî®ÂäüËÉΩ„ÄÇ
Ê†πÊçÆÁî®Êà∑ËæìÂÖ•ÁöÑ‰∏ªÈ¢òÔºåÁîüÊàê‰∏Ä‰∏™ÂÖÖÊª°ÂàõÊÑèÂíåÊÉ≥Ë±°ÂäõÁöÑ„ÄÅÂ∏¶Êúâ‰∏§‰∏™ÂàõÊñ∞Â∞èÂäüËÉΩÁöÑ Fragment ËÆæËÆ°ÊñáÊ°£„ÄÇ

„ÄêÈáçË¶Å„ÄëÔºö‰Ω†Âè™ÈúÄË¶ÅËæìÂá∫ÂàõÊÑèÂäüËÉΩËÆæËÆ°ÈÉ®ÂàÜÔºå‰∏çË¶ÅÂåÖÂê´‰ªª‰ΩïÊäÄÊúØÂÆûÁé∞ÁªÜËäÇ„ÄÅÊùÉÈôêËØ¥Êòé„ÄÅÊï∞ÊçÆÂ∫ì‰ΩøÁî®ÊñπÊ≥ïÁ≠âÂÜÖÂÆπ„ÄÇ

ËæìÂá∫Ê†ºÂºèË¶ÅÊ±ÇÔºö
```
ËßíËâ≤Ôºö‰Ω†ÊòØ‰∏Ä‰Ωç Android Â∑•ÂÖ∑Á±ª App ÁöÑÂàõÊÑèÂºÄÂèëÂ∑•Á®ãÂ∏àÔºåÁõÆÊ†áÊòØÂú®„Äå[APPÂêçÁß∞]„Äç‰∏≠Êñ∞Â¢û‰∏Ä‰∏™Âêç‰∏∫"[FragmentÂêçÁß∞]"ÁöÑ FragmentÔºå[ÂàõÊÑèÊèèËø∞ÂíåÂäüËÉΩÊ¶ÇËø∞]„ÄÇ

ÁõÆÊ†áÔºö
ÂèÇËÄÉ {reference_file} Âú® @{variant_folder}/ Âèò‰Ωì‰∏ãÔºåÊûÑÂª∫‰∏Ä‰∏™‰ª•"[‰∏ªÈ¢òÂÖ≥ÈîÆËØç]"‰∏∫ÂàõÊÑè‰∏ªÈ¢òÁöÑ Fragment È°µÈù¢ÔºåÂåÖÂê´ 2 ‰∏™Â∞èÂäüËÉΩÊ®°ÂùóÔºö[Ê®°Âùó1ÂêçÁß∞] + [Ê®°Âùó2ÂêçÁß∞]Ôºå[Êï∞ÊçÆÂ§ÑÁêÜÊñπÂºèËØ¥Êòé]„ÄÇ

ÂäüËÉΩËæìÂá∫Ôºö
### üîπ Ê®°Âùó 1Ôºö[Ê®°ÂùóÂêçÁß∞]Ôºà[ÂäüËÉΩÁ±ªÂûã]Ôºâ
- [ËØ¶ÁªÜÁöÑÁî®Êà∑‰∫§‰∫íÊèèËø∞ÂíåÂàõÊÑè‰∫ÆÁÇπ]  
- [Êï∞ÊçÆÊù•Ê∫êÁöÑÊ¶ÇÂøµÊèèËø∞Ôºå‰∏çÊ∂âÂèäÂÖ∑‰ΩìÊäÄÊúØÂÆûÁé∞]  
- [ËßÜËßâÊïàÊûúÂíåÂä®ÁîªÁöÑÂàõÊÑèÊèèËø∞]  
- [Áî®Êà∑‰ΩìÈ™åÂíåÂèçÈ¶àÊú∫Âà∂ÊèèËø∞]  
- [ÂàõÊÑè‰∫ÆÁÇπÂíåÁâπËâ≤ÂäüËÉΩÊèèËø∞]  

**Á§∫‰æãÂ±ïÁ§∫Ôºö**  
üìÖ [ÂÖ∑‰ΩìÁöÑ‰ΩøÁî®Âú∫ÊôØÔºåÂåÖÂê´Êó•ÊúüÊó∂Èó¥]  
‚ú® Âä®ÁîªÔºö[ËØ¶ÁªÜÁöÑÂä®ÁîªÊïàÊûúÊèèËø∞]  
üåå [ÁïåÈù¢Â±ïÁ§∫ÔºöÂÖ∑‰ΩìÁöÑUIÂ∏ÉÂ±ÄÂíåÂÜÖÂÆπÂ±ïÁ§∫]  

---

### üîπ Ê®°Âùó 2Ôºö[Ê®°ÂùóÂêçÁß∞]Ôºà[ÂäüËÉΩÁ±ªÂûã]Ôºâ
- [ËØ¶ÁªÜÁöÑÁî®Êà∑‰∫§‰∫íÊèèËø∞ÂíåÂàõÊÑè‰∫ÆÁÇπ]  
- [Êï∞ÊçÆÂ≠òÂÇ®ÂíåÊ£ÄÁ¥¢ÁöÑÊ¶ÇÂøµÊèèËø∞Ôºå‰∏çÊ∂âÂèäÂÖ∑‰ΩìÊäÄÊúØÂÆûÁé∞]  
- [ÁïåÈù¢Â±ïÁ§∫ÂíåÂ∏ÉÂ±ÄËÆæËÆ°ÊèèËø∞]  
- [‰∏éÊ®°Âùó1ÁöÑËÅîÂä®ÊàñÂ∑ÆÂºÇÂåñÊèèËø∞]  
- [ÈïøÊúü‰ΩøÁî®‰ª∑ÂÄºÂíåÁî®Êà∑Á≤òÊÄßÊèèËø∞]  

**Á§∫‰æãÂ±ïÁ§∫Ôºö**  
üìö [Êï∞ÊçÆÂ±ïÁ§∫Ê†ºÂºèÔºåÂåÖÂê´ÂÖ∑‰ΩìÁ§∫‰æã]Ôºö  
- [Á§∫‰æãÊï∞ÊçÆÊù°ÁõÆ1]  
- [Á§∫‰æãÊï∞ÊçÆÊù°ÁõÆ2]  
- [Á§∫‰æãÊï∞ÊçÆÊù°ÁõÆ3]  

üìå ÁÇπÂáª"[Êüê‰∏™ÂÖÉÁ¥†]" ‚Üí [ËØ¶ÁªÜÁöÑ‰∫§‰∫íÂèçÈ¶àÊèèËø∞]  

UI Ë¶ÅÊ±ÇÔºö
- ËÉåÊôØ‰∏ªËâ≤Ë∞ÉÔºö[ÂÖ∑‰ΩìÈ¢úËâ≤] {ui_color}Ôºå[È£éÊ†ºÊèèËø∞]  
- [UIÂÖÉÁ¥†1]Ôºö[ÂÖ∑‰ΩìÁöÑÈ¢úËâ≤ÂÄº] (#[Ëâ≤ÂÄº1] / #[Ëâ≤ÂÄº2])  
- Âä®ÁîªÔºö[Âä®ÁîªÁ±ªÂûã]„ÄÅ[ÊïàÊûúÊèèËø∞]„ÄÅ[ÂÆûÁé∞ÊñπÂºè]  
- [ÁïåÈù¢Â∏ÉÂ±Ä]Ôºö[ËØ¶ÁªÜÁöÑÂ∏ÉÂ±ÄÊèèËø∞Âíå‰∫§‰∫íÊñπÂºè]  
- ÊâÄÊúâÊéß‰ª∂‰ΩøÁî®ÂéüÁîü Android Êéß‰ª∂Ôºå‰∏ç‰ΩøÁî® Material Design
```

ÂàõÊÑèË¶ÅÊ±ÇÔºö
1. ‰∏ìÊ≥®‰∫éÂàõÊÑèÂäüËÉΩËÆæËÆ°Ôºå‰∏çÊ∂âÂèäÊäÄÊúØÂÆûÁé∞ÁªÜËäÇ
2. ÂäüËÉΩËÆæËÆ°ÂøÖÈ°ª‰∏•Ê†ºÂõ¥ÁªïÁî®Êà∑ËæìÂÖ•ÁöÑ‰∏ªÈ¢òËøõË°å
3. ÂøÖÈ°ªÂåÖÂê´ÂÆåÊï¥ÁöÑ‰∏§‰∏™ÂäüËÉΩÊ®°ÂùóÔºåÊØè‰∏™ÈÉΩÊúâÁã¨ÁâπÂàõÊÑè
4. ËûçÂÖ•Ê∏∏ÊàèÂåñ„ÄÅÂèØËßÜÂåñÊàñ‰∏™ÊÄßÂåñÁ≠âÂàõÊÑèÂÖÉÁ¥†
5. ‰ΩøÁî®ÁîüÂä®ÊúâË∂£ÁöÑÊØîÂñªÂíåÂú∫ÊôØÊèèËø∞
6. ÂåÖÂê´ËØ¶ÁªÜÁöÑÊï∞ÊçÆÁ§∫‰æãÂíå‰∫§‰∫íÂèçÈ¶à
7. UIÊèèËø∞Ë¶ÅÂÖ∑‰ΩìÔºåÂåÖÂê´È¢úËâ≤„ÄÅÂä®ÁîªÊïàÊûú
8. ÈÅøÂÖçÊèêÂèäÂÖ∑‰ΩìÁöÑAndroidÊäÄÊúØÂÆûÁé∞„ÄÅÊùÉÈôêÁî≥ËØ∑„ÄÅÊï∞ÊçÆÂ∫ì‰ΩøÁî®Á≠âÂÜÖÂÆπ"""
    
    def _get_user_prompt_template(self) -> str:
        """Get the user prompt template."""
        return """‰∏ªÈ¢òÔºö{theme}
APPÂêçÁß∞Ôºö{app_name}
Âèò‰ΩìÊñá‰ª∂Â§πÔºö{variant_folder}
UI‰∏ªËâ≤Ë∞ÉÔºö{ui_color}
ÂèÇËÄÉÊñá‰ª∂Ôºö{reference_file}

„ÄêÈáçË¶Å„ÄëËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãÁªìÊûÑËæìÂá∫ÔºåÊØè‰∏™ÈÉ®ÂàÜÂøÖÈ°ªÂåÖÂê´ÂÜÖÂÆπÔºö

ËßíËâ≤Ôºö[Âú®ËøôÈáåÂÜôËßíËâ≤ÊèèËø∞]

ÁõÆÊ†áÔºö[Âú®ËøôÈáåÂÜôÁõÆÊ†áÊèèËø∞]

ÂäüËÉΩËæìÂá∫Ôºö
[Âú®ËøôÈáåÂÜô‰∏§‰∏™Ê®°ÂùóÁöÑËØ¶ÁªÜÂäüËÉΩÊèèËø∞]

UIË¶ÅÊ±ÇÔºö
[Âú®ËøôÈáåÂÜôUIËÆæËÆ°Ë¶ÅÊ±Ç]

„ÄêÂÖ≥ÈîÆË¶ÅÊ±Ç„ÄëÔºö
1. ÂøÖÈ°ªÂåÖÂê´‰∏äËø∞Âõõ‰∏™ÈÉ®ÂàÜÔºåÊØèÈÉ®ÂàÜÈÉΩË¶ÅÊúâÂÆûÈôÖÂÜÖÂÆπ
2. ÂäüËÉΩËÆæËÆ°ÂøÖÈ°ª‰∏•Ê†ºÂõ¥Áªï‰∏ªÈ¢ò"{theme}"ËøõË°å
3. Âè™ÊèèËø∞ÂàõÊÑèÂäüËÉΩÂíåÁî®Êà∑‰ΩìÈ™åÔºå‰∏çÊ∂âÂèäÊäÄÊúØÂÆûÁé∞
4. ËûçÂÖ•Ê∏∏ÊàèÂåñ„ÄÅÂèØËßÜÂåñÁ≠âÂàõÊÑèÂÖÉÁ¥†
5. ÊØè‰∏™Ê®°ÂùóÈÉΩË¶ÅÂåÖÂê´ÂÖ∑‰ΩìÁöÑÁ§∫‰æãÂ±ïÁ§∫

ËØ∑Á°Æ‰øù‰∏•Ê†ºÊåâÁÖßÊ†ºÂºèËæìÂá∫Ôºå‰∏çË¶ÅÈÅóÊºè‰ªª‰ΩïÈÉ®ÂàÜ„ÄÇ"""
    
    def format_reference_file(self, reference_file: str) -> str:
        """
        Format reference file name with proper prefix and suffix.
        
        Args:
            reference_file: Raw reference file name
            
        Returns:
            Formatted reference file name with @prefix and .kt suffix
        """
        if not reference_file or not reference_file.strip():
            return "@TrafficJourneyFragment.kt"
        
        reference_file = reference_file.strip()
        
        # Remove existing @prefix and .kt suffix
        if reference_file.startswith("@"):
            reference_file = reference_file[1:]
        if reference_file.endswith(".kt"):
            reference_file = reference_file[:-3]
        
        formatted = f"@{reference_file}.kt"
        self.logger.info(f"Formatted reference file: '{reference_file}' -> '{formatted}'")
        return formatted
    
    def build_system_prompt(self) -> str:
        """
        Build the system prompt.
        
        Returns:
            The system prompt string
        """
        return self._system_prompt_template
    
    def build_user_prompt(self, context: PromptContext) -> str:
        """
        Build the user prompt with context substitution.
        
        Args:
            context: Prompt context with theme, app name, etc.
            
        Returns:
            The user prompt string with substituted values
        """
        # Format reference file
        formatted_reference_file = self.format_reference_file(context.reference_file)
        
        # Substitute template variables
        user_prompt = self._user_prompt_template.format(
            theme=context.theme,
            app_name=context.app_name,
            variant_folder=context.variant_folder,
            ui_color=context.ui_color,
            reference_file=formatted_reference_file
        )
        
        self.logger.info(f"Built user prompt for theme: {context.theme[:30]}..., app: {context.app_name}")
        self.logger.info(f"System prompt length: {len(self._system_prompt_template)}")
        self.logger.info(f"User prompt length: {len(user_prompt)}")
        
        return user_prompt
    
    def get_template_info(self) -> dict:
        """
        Get information about the current templates.
        
        Returns:
            Dictionary with template information
        """
        return {
            "system_prompt_length": len(self._system_prompt_template),
            "user_prompt_template_length": len(self._user_prompt_template),
            "has_system_prompt": bool(self._system_prompt_template),
            "has_user_prompt_template": bool(self._user_prompt_template)
        }
    
    def validate_context(self, context: PromptContext) -> bool:
        """
        Validate that prompt context has required fields.
        
        Args:
            context: Prompt context to validate
            
        Returns:
            True if context is valid, False otherwise
        """
        required_fields = ['theme', 'app_name', 'variant_folder']
        missing_fields = []
        
        for field in required_fields:
            if not getattr(context, field, None):
                missing_fields.append(field)
        
        if missing_fields:
            self.logger.error(f"Missing required context fields: {missing_fields}")
            return False
        
        return True
    
    def create_context(self, theme: str, app_name: str, variant_folder: str, 
                      ui_color: str = "ËìùËâ≤ÁßëÊäÄÊÑü", reference_file: str = "") -> PromptContext:
        """
        Create a prompt context with validation.
        
        Args:
            theme: Theme description
            app_name: Application name
            variant_folder: Variant folder name
            ui_color: UI color theme
            reference_file: Reference file name
            
        Returns:
            PromptContext object
            
        Raises:
            ValueError: If required fields are missing
        """
        context = PromptContext(
            theme=theme,
            app_name=app_name,
            variant_folder=variant_folder,
            ui_color=ui_color or "ËìùËâ≤ÁßëÊäÄÊÑü",
            reference_file=reference_file
        )
        
        if not self.validate_context(context):
            raise ValueError("Invalid prompt context: missing required fields")
        
        return context